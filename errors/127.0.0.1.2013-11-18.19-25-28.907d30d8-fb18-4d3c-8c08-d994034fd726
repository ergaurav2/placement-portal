(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'images'"
p3
sS'layer'
p4
S'/home/gaurav/Sem1/web2py/applications/placement_portal/controllers/student.py'
p5
sS'code'
p6
S'# coding: utf8\n# try something like\nfrom student import Student\nfrom gluon.tools import Mail\nfrom student import  Academicdetails\nfrom datetime import date\ndef index(): return dict(message="hello from student.py")\n\n# controller\n\n\n\ndef updateprofile():\n    return dict()\n\ndef random1():\n   form=SQLFORM(db.jobdetails)\n   if form.process().accepted:\n      response.flash = \'form accepted\'\n   elif form.errors:\n      response.flash = \'form has errors\'\n   return dict(form=form)\n   \ndef download():\n    print request.args;\n    return response.download(request,db)\ndef jq_check():\n    return dict()\n\ndef layout_check():\n   request.vars.lab="jindal is here"\n   record = db.person(request.args(0))\n   form = SQLFORM(db.person, record, deletable=True,\n                  upload=URL(\'download\'))\n   if form.process().accepted:\n       response.flash = \'form accepted\'\n   elif form.errors:\n       response.flash = \'form has errors\'\n   return dict(form=form)\n\ndef download():\n    return response.download(request, db)\n\ndef studentloginpage():\n    return(redirect(URL(\'student/login\')))\n\n\n    \n\n\n    \n\n\n\n\n\n\n\n    \ndef random():\n     \n      #obj_student=Student()\n     #obj_student.getstudentbasicdetails(session.emailid,db)\n     grid = SQLFORM.smartgrid(db.student_basicdetails,\n                             user_signature=False)\n     return dict(grid=grid)\n   \n\n############################################################################################################     \n\n\n\n\n###########################111111111111111111###########\n###controller\ndef login():\n    response.flash = T("Welcome to web2py!")\n    return dict(message="")\n\n\n###method\ndef validate_login():\n    if request.vars.signin:\n        row = db((db.student_basicdetails.emailid==request.vars.emailid) & (db.student_basicdetails.pwd==request.vars.pwd)).select().first()\n        print request.vars.pwd\n        print request.vars.emailid\n        print row\n        if row:    \n            session.user=\'student\'\n            session.emailid=request.vars.emailid\n            session.login=True\n            redirect(URL(\'student\',\'home\'))\n            return dict(message=request.vars.emailid)\n        else :\n            redirect(URL(\'student\',\'login\'))\n            #redirect(URL(\'company\',\'registration\'))\n            return dict(message="Who are you ?")\n    else:\n        return (redirect(URL(\'student\',\'registration\')))\n\n            \n#######################22222222222222222#############\n###controller\n\ndef registration():\n   form=SQLFORM(db.student_basicdetails,\n                fields=[\'rollno\',\'firstname\',\'lastname\',\'fathername\',\'birth_date\',\'gender\',\'emailid\',\'pwd\',\'course\',\'mobile\'])\n   if form.process().accepted:\n       obj_academicdetails=Academicdetails()\n       obj_academicdetails.insertacademicdetails(request.vars.emailid,request.vars.rollno,db)\n       redirect(URL(\'student\',\'login\'))\n   elif form.errors:\n       response.flash = \'form has errors\'\n    #form = SQLFORM(db.student_basicdetails,\n     #              fields=[\'rollno\', \'firstname\'])\n   return dict(form=form)\n\n\n###method##################                 use less\ndef new_registration():\n    obj=Student()\n    obj.createbasicstudent(request.vars)\n    obj.insertstudent(db)\n    obj_academicdetails=Academicdetails()\n    obj_academicdetails.insertacademicdetails(request.vars.emailid,request.vars.rollno,db)\n    return dict(redirect(URL(\'student\',\'login\')))\n\n\n            \n########3333333333333333333333333333333333\n\n######method\n\ndef logout():\n   #To logout\n    del session.login\n    del session.user\n    del session.emailid\n    redirect(URL(\'student\',\'login\'))\n            \n \n        \n        \n########444444444444444444444444444444444444\n\n#####controller\ndef forgot_pass():\n    return dict()\n\n\n#####method\ndef forgot_password():\n    mail = Mail() \n    mail.settings.server = \'smtp.gmail.com:587\'\n    mail.settings.sender = \'placementtpo@gmail.com\'\n    mail.settings.login = \'placementtpo@gmail.com:placementpg1\'\n    mailid=request.vars.emailid\n    row=db(db.student_basicdetails.emailid==mailid).select().first()\n    if row:\n        msg=row.pwd\n        mail.send(to=[str(mailid)], subject="Reset Password", message=str(msg))\n        return(redirect(URL(\'default\',\'home\')))\n    else:\n        return(redirect(URL(\'default\',\'home\')))\n    \n    \n    \n#######################555555555555555555555555555555\n\n######controller\ndef home():\n    checkstudentvalidlogin()\n    obj_student=Student()\n    #obj_student.getstudentbasicdetails("jindal.manishkumar1@gmail.com",db)\n    obj_student.getstudentbasicdetails(session.emailid,db)\n    images1 = db().select(db.notice_details.ALL)\n    images2 = db().select(db.event_details.ALL)\n    return dict(images1=images1,images2=images2)\n\n\n######################66666666666666666666666666666666666666\n\n#######controller\n\ndef viewprofile():\n    checkstudentvalidlogin()\n    obj=db(db.student_basicdetails.emailid==session.emailid).select().first()\n    db.student_basicdetails.id.readable=False;\n    form1=SQLFORM(db.student_basicdetails,obj,readonly=True)\n    \n    obj=db(db.student_academicdetails.emailid==session.emailid).select().first()\n    db.student_academicdetails.id.readable=False;\n    db.student_academicdetails.rollno.readable=False;\n    db.student_academicdetails.emailid.readable=False;\n    db.student_academicdetails.high_marks_check.readable=False;\n    form2=SQLFORM(db.student_academicdetails,obj,\n                  readonly=True)\n    #checkstudentvalidlogin()\n    #obj_student=Student()\n    #obj_academicdetails=Academicdetails()\n    #obj_student.getstudentbasicdetails("jindal.manishkumar1@gmail.com",db)\n    #obj_student.getstudentbasicdetails(session.emailid,db)\n    #obj_academicdetails.getacademicdetails("jindal.manishkumar1@gmail.com",db)\n    #obj_academicdetails.getacademicdetails(session.emailid,db)\n    #return dict(studentdetails=obj_student,academicdetails=obj_academicdetails)\n    return dict(form1=form1,form2=form2)\n#########method\n\n\n\ndef profile():\n    checkstudentvalidlogin()\n    return(redirect(URL(\'student\',\'updateprofile\')))\n\n\n################################7777777777777777777777777777777777777777777\n\n######controller\n\ndef updateprofile():\n    #checkstudentvalidlogin()\n    #obj_student=Student()\n    #obj_academicdetails=Academicdetails()\n    #obj_student.getstudentbasicdetails("jindal.manishkumar1@gmail.com",db)\n    #obj_student.getstudentbasicdetails(session.emailid,db)\n    #obj_academicdetails.getacademicdetails("jindal.manishkumar1@gmail.com",db)\n    #obj_academicdetails.getacademicdetails(session.emailid,db)\n    #return dict(studentdetails=obj_student,academicdetails=obj_academicdetails)\n    #db.student_basicdetails.id.readable=False;\n    #db.student_basicdetails.pwd.writeable=False;\n    #db.student_basicdetails.emailid.writable=False;\n    #obj=db(db.student_basicdetails.emailid==session.emailid).select().first()\n   \n    #form=SQLFORM(db.student_basicdetails,obj)\n   checkstudentvalidlogin()\n   db.student_basicdetails.id.readable=False;\n   obj1=db(db.student_basicdetails.emailid==session.emailid).select().first() \n   form1=SQLFORM(db.student_basicdetails,obj1,\n                fields=[\'rollno\',\'firstname\',\'lastname\',\'fathername\',\'birth_date\',\'gender\',\'ext_emailid\',\'course\',\'mobile\',\'birth_date\',\'peradd\',\'curradd\'])\n   \n   obj2=db(db.student_academicdetails.emailid==session.emailid).select().first()\n   db.student_academicdetails.id.readable=False;\n   db.student_academicdetails.rollno.readable=False;\n   db.student_academicdetails.emailid.readable=False;\n   db.student_academicdetails.high_marks_check.readable=False;\n    \n    \n   form2=SQLFORM(db.student_academicdetails,obj2,\n               fields=[\'high_board\',\'high_marks\',\'high_passout\',\'inter_board\',\'inter_marks\',\'inter_passout\',\'ug_board\',\'ug_marks\',\'ug_passout\',\'pg_board\',\'pg_marks\',\'pg_passout\',\'high_marks_check\'])\n  \n   if form1.process().accepted:\n       print "form one accepted"\n       response.flash = \'form accepted\'\n   elif form1.errors:\n       print "form one errros"\n       response.flash = \'form has errors\'\n    #form = SQLFORM(db.student_basicdetails,\n     #              fields=[\'rollno\', \'firstname\'])\n   if form2.process().accepted:\n       print "form two accepted"\n       response.flash = \'form accepted\'\n   elif form2.errors:\n       print "form two errros"\n       response.flash = \'form has errors\'\n    #form = SQLFORM(db.student_basicdetails,\n     #              fields=[\'rollno\', \'firstname\'])\n   return dict(form1=form1,form2=form2)    \n \n######method\n\n\ndef saveprofile():\n    checkstudentvalidlogin()\n    obj_student=Student()\n    obj_student.createstudent(request.vars)\n    #obj_student.getstudentbasicdetails("jindal.manishkumar1@gmail.com",db)\n    obj_student.updatestudent(session.emailid,db)\n    obj_academicdetails=Academicdetails()\n    obj_academicdetails.createacademicdetails(request.vars)\n    obj_academicdetails.updateacademicdetails(session.emailid,db)\n \n    return dict()\n\n\n\n\n###############################88888888888888888888888888888888888888888888888\n\n######controller(job applications)\n\ndef viewjobs():\n   checkstudentvalidlogin()\n   #session.emailid=\'ga@gmail.com\'\n   rows = db(db.student_job.emailid==session.emailid).select(join=db.jobdetails.on(db.student_job.jobid==db.jobdetails.id))\n   print rows\n   listjobid=[]\n   listavailjob=[]\n   for row in rows:\n    listjobid.append(row.student_job.jobid)\n    print "today date ",date.today()\n    print "email id ", session.emailid\n    if (not row.jobdetails.deadline) or row.jobdetails.deadline >= date.today():\n        listavailjob.append(row.jobdetails.id)\n    #listlinks.append(dict)\n    print "avaialble jobs", listavailjob\n    newrow=row\n    print row\n   visiblefields=[db.jobdetails.companyname,db.jobdetails.dateofrec,db.jobdetails.deadline,db.student_job.status]\n   jobstatus={}\n   rows=db(db.student_job.emailid==session.emailid).select()\n   print "job status rows ", rows\n   for row in rows:\n        jobstatus[row.jobid]=row.status\n        \n   print "jobstatus ",jobstatus\n   grid = SQLFORM.grid(\n                       #db(\n                           db.jobdetails.id.belongs(listjobid)\n                          #db.student_job.emailid==session.emailid and db.jobdetails\n                          #)\n                       #.select(join=db.jobdetails.on(db.student_job.jobid==db.jobdetails.id)\n                       #)\n                       ,fields=visiblefields,\n                       #left=db.jobdetails.on(db.jobdetails.id==db.student_job.jobid),\n                       user_signature=False,\n                            deletable=False,\n                           editable=False,\n                           create=False,links = [ #start of the list\n    dict(    #start of the dict\n         header=\'Job Application\', #the header\n          body = lambda row :  display1(jobstatus,listavailjob,row.id)#\n          #lambda row : A(\'Apply\',_href=URL(\'apply\',vars=dict(z=row.id)))    #the body\n         ) #end of the dict\n] \n                         )\n    #grid=rowsdent\n    #print \'manage_job\'\n   # grid=SQLFORM.grid(db.jobdetails,\n          #            user_signature=False,oncreate=createjob,links = [ #start of the list\n   # dict(    #start of the dict\n    #       header=\'Job Application\', #the header\n     #      body = lambda row : A(\'Apply\',_href=URL(\'apply\'))    #the body\n      #     ) #end of the dict\n#] )   \n   return dict(grid=grid)\n\n\n\n\n########################################99999999999999999999999999999999999\n\n#########controller\n\ndef contact_tpo():\n    checkstudentvalidlogin()\n    return dict()\n    \n###########method\n    \ndef sendmail():\n    mail = Mail() \n    mail.settings.server = \'smtp.gmail.com:587\' \n    mail.settings.sender = \'placementtpo@gmail.com\'\n    mail.settings.login = \'placementtpo@gmail.com:placementpg1\' \n #elect_id = request.args(0,cast=int) \n #m=db(db.election.id==elect_id) \n #for row in db(db.election.id==elect_id).select(): \n #title=row.title \n #m.update(electionflag=True) \n #m.update(row.is_active=False) \n #for row in db().select(db.voter.ALL): \n # if row.election_id==title: \n    mail.send(to=[\'jindal.manishkumar1@gmail.com\'], subject=request.vars.subject, message=request.vars.msg)\n    return(redirect(URL(\'student\',\'home\')))\n    \n\n\n\n##################################10101010101010101010101010101010101010101\n\n#####controller\n\ndef resetpassword():\n    checkstudentvalidlogin()\n    if request.vars.msg:\n        response.flash=request.vars.msg\n    return dict()    \n\n######method\n\ndef changepassword():\n    checkstudentvalidlogin()\n    print \'emailid\', session.emailid\n    obj=db(db.student_basicdetails.emailid==session.emailid and db.student_basicdetails.pwd==request.vars.pwd).select().first()\n    print obj\n    if obj:\n        obj.update_record(pwd=request.vars.newpwd)\n        redirect(URL(\'student\',\'home\'))\n    else:\n        redirect(URL(\'student\',\'resetpassword\'))\n   \n    #obj_student.getstudentbasicdetails("jindal.manishkumar1@gmail.com",db)\n    return dict()\n\n\n\n##########################################################################################################################\ndef checkstudentvalidlogin():\n    if not session.login or not session.user or not session.user==\'student\' :\n        #student login page\n        \n        redirect(URL(\'login\'))\n        return dict(message="Enter valid loginid and password")\n\n    \n    \n    \n    \n    \n    \n###################################################################################################################################\n\n\ndef  display1(jobstatus,listavailjob,jobid):\n    print "current status ",jobid\n    print jobstatus\n    if jobstatus[str(jobid)]:\n        print "Withdraw"\n        if jobid in listavailjob:\n            return A(str(\'Withdraw\'),_href=URL(\'updatestatus\',vars=dict(jobid=jobid,jobstatus=jobstatus)))\n        else:\n            return str(\'Applied Deadline Over\')\n    elif not jobstatus[str(jobid)]:\n        print "Apply"\n        if jobid in listavailjob:\n            return A(str(\'Apply\'),_href=URL(\'updatestatus\',vars=dict(jobid=jobid,jobstatus=jobstatus)))\n        else:\n            return str(\'Not Applied Deadline Over\')\n\n        return A(str(\'Apply\'),_href=URL(\'updatestatus\',vars=dict(jobid=jobid,jobstatus=jobstatus)))\n                 #URL(\'updatestatus\',vars=dict(jobstatus=jobstatus,jobid=jobid)))\ndef updatestatus():\n        print "Request ",request.vars.jobid\n        #request.vars.jobstatus[request.vars.jobid]=not request.vars.jobstatus[request.vars.jobid]\n        row=db(db.student_job.emailid==session.emailid and db.student_job.jobid==request.vars.jobid).select().first()\n        print "row before ",row\n        newstatus=not row.status\n        print "newstatus ",newstatus\n        row.update_record(status=newstatus)\n        row=db(db.student_job.emailid==session.emailid and db.student_job.jobid==request.vars.jobid).select().first()\n        print "row after ",row\n        redirect(URL(\'student\',\'viewjobs\'))\n        return (str(newstatus)) \ndef Apply():\n    row=db(db.student_job.jobid==request.vars.jobid and db.student_job.emailid==session.emailid).select().first()\n    print "jobid ",request.vars.jobid," Apply",row\n   # row.update_record(status=True)\n    #redirect(URL(\'viewjobs\'))\n    print row\n    return dict()\ndef Withdraw():\n    obj=db(db.student_job.jobid==request.vars.jobid and db.student_job.emailid==session.emailid).select().first()\n    row=db(db.student_job.jobid==request.vars.jobid and db.student_job.emailid==session.emailid).select().first()\n    print "jobid ",request.vars.jobid," Withdraw ",row\n    row.update_record(status=False)\n    #redirect(URL(\'viewjobs\'))\n    print row\n    return dict()\n\nresponse._vars=response._caller(viewjobs)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/gaurav/Sem1/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/gaurav/Sem1/web2py/applications/placement_portal/controllers/student.py", line 470, in <module>\n  File "/home/gaurav/Sem1/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/gaurav/Sem1/web2py/applications/placement_portal/controllers/student.py", line 331, in viewjobs\n    body = lambda row :  display1(jobstatus,listavailjob,row.id)#\n  File "/home/gaurav/Sem1/web2py/gluon/sqlhtml.py", line 2007, in grid\n    table = db[request.args[-2]]\n  File "/home/gaurav/Sem1/web2py/gluon/dal.py", line 8034, in __getitem__\n    return self.__getattr__(str(key))\n  File "/home/gaurav/Sem1/web2py/gluon/dal.py", line 8041, in __getattr__\n    return ogetattr(self, key)\nAttributeError: \'DAL\' object has no attribute \'images\'\n'
p11
s.