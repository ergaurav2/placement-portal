(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'images'"
p3
sS'layer'
p4
S'/home/gaurav/Sem1/web2py/applications/placement_portal/controllers/college.py'
p5
sS'code'
p6
S'# coding: utf8\n# try something like\nfrom gluon.tools import Mail\ndef index(): return dict(message="hello from college.py")\n#####controller\n\ndef resetpassword():\n    checkcollegevalidlogin()\n    if request.vars.msg:\n        response.flash=request.vars.msg\n    return dict()    \n\n######method\n\ndef changepassword():\n    checkcollegevalidlogin()\n    print \'emailid\', session.emailid\n    obj=db(db.tpo_basicdetails.emailid==session.emailid and db.tpo_basicdetails.pwd==request.vars.pwd).select().first()\n    print obj\n    if obj:\n        obj.update_record(pwd=request.vars.newpwd)\n        redirect(URL(\'college\',\'home\'))\n    else:\n        redirect(URL(\'college\',\'resetpassword\'))\n   \n    #obj_student.getstudentbasicdetails("jindal.manishkumar1@gmail.com",db)\n    return dict()\n\n\n##############################################################################################################\n\n\n\n\n\ndef home():\n    checkcollegevalidlogin()\n    obj=db(db.tpo_basicdetails.emailid==session.emailid).select().first()\n    db.tpo_basicdetails.id.readable=False;\n    db.tpo_basicdetails.pwd.readable=False;\n    form=SQLFORM(db.tpo_basicdetails,obj,readonly=True)\n    return dict(form=form)\n\ndef updateprofile():\n    checkcollegevalidlogin()\n    db.tpo_basicdetails.id.readable=False;\n    db.tpo_basicdetails.pwd.readable=False;\n    db.tpo_basicdetails.emailid.writeable=False;\n    obj=db(db.tpo_basicdetails.emailid==session.emailid).select().first() \n    form=SQLFORM(db.tpo_basicdetails,obj,\n                 fields=[\'tponame\',\'mobileno\',\'address\'])\n    if form.process().accepted:\n        redirect(URL(\'college\',\'home\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    return dict(form=form)\n\ndef addevent():\n    return dict()\n\n\n\n    \n\n\n    \n#########################################################################################################\n\n############111111111111111111111111111111##############################\n\n#####controller\n\ndef login():\n    return dict()\n\n#####method\n\ndef validate_login():\n    row = db(db.tpo_basicdetails.emailid==request.vars.emailid).select().first()\n    if row and row.pwd==request.vars.pwd:\n         session.user=\'college\'\n         session.emailid=request.vars.emailid\n         session.login=True\n         redirect(URL(\'college\',\'home\'))\n         return dict(message=request.vars.emailid)\n    else :\n        redirect(URL(\'college\',\'login\'))\n        return dict(message="Who are you ?")\n    \n\n\n\n###################################################################################################\n\n\n###################333333333333333333333############################\n\n##########method\n\ndef logout():\n   #To logout\n    del session.login\n    del session.user\n    del session.emailid\n    redirect(URL(\'college\',\'login\'))\n            \n        \n####################44444444444444444444############################\n\n###########controller\ndef forgot_pass():\n    return dict()\n\n\n##########method\ndef forgot_password():\n    mail = Mail() \n    mail.settings.server = \'smtp.gmail.com:587\' \n    mail.settings.sender = \'placementtpo@gmail.com\'\n    mail.settings.login = \'placementtpo@gmail.com:placementpg1\' \n    mailid=request.vars.emailid\n    row=db(db.tpo_basicdetails.emailid==mailid).select().first()\n    if row:\n        msg=row.pwd\n        mail.send(to=[str(mailid)], subject="Reset Password", message=str(msg))\n        return(redirect(URL(\'default\',\'home\')))\n    else:\n        return(redirect(URL(\'default\',\'home\')))\n        \n#################555555555555555555555555555############################\n\n########controller\n\ndef manage_events():\n   checkcollegevalidlogin()\n   grid = SQLFORM.smartgrid(db.event_details,\n                             user_signature=False)\n   return dict(grid=grid)\n\n\n################66666666666666666666666666666#########################\n\n###########controller\n\ndef manage_notices():\n   checkcollegevalidlogin()\n   grid = SQLFORM.smartgrid(db.notice_details,\n                             user_signature=False)\n   return dict(grid=grid)\n\n\n######################77777777777777777777777######################\n\n############controller\n\ndef viewstudentprofile():\n     checkcollegevalidlogin()\n     db.student_basicdetails.pwd.readable=False\n     grid = SQLFORM.smartgrid(db.student_basicdetails,\n                             user_signature=False)\n     return dict(grid=grid)\n\n    \n    \n###########################888888888888888888888888888################\n\n######controller\n\n\ndef job():\n   checkcollegevalidlogin()\n   grid = SQLFORM.smartgrid(db.jobdetails,\n                             user_signature=False,oncreate=updatestudent_job,onupdate=updatestudent_job)\n   return dict(grid=grid)\n\n\n\n############################999999999999999999999999999################\n\n######controller\n\n\ndef jobapplicants():\n   checkcollegevalidlogin()\n   visiblefields=[db.jobdetails.companyname,db.jobdetails.dateofrec,db.jobdetails.deadline,db.jobdetails.id]\n   grid = SQLFORM.smartgrid(db.jobdetails,\n                             user_signature=False\n                             ,fields=visiblefields,searchable=False,editable=False,deletable=False,links = [ #start of the list\n    dict(    #start of the dict\n         header=\'Eligible Students\', #the header\n          body = lambda row : A(\'View Eligible\',_href=URL(\'vieweligiblestudents\',vars=dict(jobid=row.id)))\n         ), #end of the dict]\n    dict(    #start of the dict\n         header=\'Applied Students\', #the header\n          body = lambda row : A(\'View Applied\',_href=URL(\'viewappliedstudents\',vars=dict(jobid=row.id)))\n         ), #end of the dict]\n    ]\n                             )\n   return dict(grid=grid)\n\n########methods\n\n###m1\n\ndef vieweligiblestudents():\n    checkcollegevalidlogin()\n    rows = db(db.student_job.jobid==request.vars.jobid).select()\n    listemailid=[]\n    rows1=db(db.student_job.jobid==request.vars.jobid).select(db.student_job.emailid,db.student_job.status)\n    jobstatus={}\n    for row in rows1:\n        if row.status:\n            jobstatus[row.emailid]="Applied"\n        else :\n            jobstatus[row.emailid]="Not Applied"\n    for row in rows:\n        listemailid.append(row.emailid)\n    db.student_basicdetails.pwd.readable=False\n    visiblefields=[db.student_basicdetails.rollno,db.student_basicdetails.firstname,db.student_basicdetails.lastname,db.student_basicdetails.emailid,\n                  db.student_basicdetails.course,db.student_basicdetails.mobile]\n    grid=SQLFORM.grid(db.student_basicdetails.emailid.belongs(listemailid),fields=visiblefields,searchable=False,deletable=False,editable=False,\n                      orderby=db.student_basicdetails.course,\n                      links=[\n                              dict(    #start of the dict\n         header=\'Application Status\', #the header\n          body = lambda row : jobstatus[row.emailid]\n          #lambda row : A(\'Apply\',_href=URL(\'apply\',vars=dict(z=row.id)))    #the body\n         )]\n     )\n    return dict(grid=grid)\n\n\n#####m2\ndef viewappliedstudents():\n    checkcollegevalidlogin()\n    rows = db((db.student_job.jobid==request.vars.jobid) & (db.student_job.status==\'True\')).select()\n    listemailid=[]\n    for row in rows:\n            listemailid.append(row.emailid)\n    db.student_basicdetails.pwd.readable=False\n    visiblefields=[db.student_basicdetails.rollno,db.student_basicdetails.firstname,db.student_basicdetails.lastname,db.student_basicdetails.emailid,\n                  db.student_basicdetails.course,db.student_basicdetails.mobile]\n    grid=SQLFORM.grid(db.student_basicdetails.emailid.belongs(listemailid),fields=visiblefields,searchable=False,deletable=False,editable=False,\n                      orderby=db.student_basicdetails.course,\n     )\n    return dict(grid=grid)\n    \ndef updatestudent_job(form):\n    rows=db(db.student_job.jobid == form.vars.id)\n    print "jobid"\n    rows.delete()\n    high_marks=form.vars.high_marks\n    inter_marks=form.vars.inter_marks\n    ug_marks=form.vars.ug_marks\n    pg_marks=form.vars.pg_marks\n    eligible=form.vars.eligible\n    rows =db(db.student_basicdetails.course.belongs(eligible)).select(\n                                                  join=db.student_academicdetails.on(db.student_basicdetails.emailid==db.student_academicdetails.emailid))\n    for row in rows:\n        if (not high_marks or row.student_academicdetails.high_marks>=high_marks):\n            if (not inter_marks or row.student_academicdetails.inter_marks>=inter_marks) :\n                if (not ug_marks or row.student_academicdetails.ug_marks>=ug_marks):\n                    if (not pg_marks or not row.student_academicdetails.high_marks_check or row.student_academicdetails.pg_marks>=pg_marks):\n                       db.student_job.insert(emailid=row.student_academicdetails.emailid,jobid=form.vars.id,status=False)\n    return dict()\n\ndef apply():\n   checkcollegevalidlogin()\n   redirect(URL(\'manage_job\'))\n   return dict()\n\ndef viewstudentprofile():\n     checkcollegevalidlogin()\n     db.student_basicdetails.pwd.readable=False\n     grid = SQLFORM.grid(db.student_basicdetails,\n                             user_signature=False)\n     return dict(grid=grid)\n\ndef checkcollegevalidlogin():\n    if not session.login or not session.user or not session.user==\'college\' :\n        #student login page\n        \n        redirect(URL(\'login\'))\n        return dict(message="Enter valid login id and password")\n\nresponse._vars=response._caller(manage_events)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/gaurav/Sem1/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/gaurav/Sem1/web2py/applications/placement_portal/controllers/college.py", line 286, in <module>\n  File "/home/gaurav/Sem1/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/gaurav/Sem1/web2py/applications/placement_portal/controllers/college.py", line 137, in manage_events\n    user_signature=False)\n  File "/home/gaurav/Sem1/web2py/gluon/sqlhtml.py", line 2692, in smartgrid\n    user_signature=user_signature, **kwargs)\n  File "/home/gaurav/Sem1/web2py/gluon/sqlhtml.py", line 2023, in grid\n    table = db[request.args[-2]]\n  File "/home/gaurav/Sem1/web2py/gluon/dal.py", line 8034, in __getitem__\n    return self.__getattr__(str(key))\n  File "/home/gaurav/Sem1/web2py/gluon/dal.py", line 8041, in __getattr__\n    return ogetattr(self, key)\nAttributeError: \'DAL\' object has no attribute \'images\'\n'
p11
s.